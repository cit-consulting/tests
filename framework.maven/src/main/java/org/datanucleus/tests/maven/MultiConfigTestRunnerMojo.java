package org.datanucleus.tests.maven;

import static org.twdata.maven.mojoexecutor.MojoExecutor.configuration;
import static org.twdata.maven.mojoexecutor.MojoExecutor.element;
import static org.twdata.maven.mojoexecutor.MojoExecutor.executeMojo;
import static org.twdata.maven.mojoexecutor.MojoExecutor.executionEnvironment;
import static org.twdata.maven.mojoexecutor.MojoExecutor.goal;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;

import org.apache.maven.execution.MavenSession;
import org.apache.maven.model.Plugin;
import org.apache.maven.model.PluginExecution;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.BuildPluginManager;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.project.MavenProject;
import org.codehaus.plexus.util.xml.Xpp3Dom;
import org.codehaus.plexus.util.xml.Xpp3DomUtils;
import org.twdata.maven.mojoexecutor.MojoExecutor.ExecutionEnvironment;

/**
 * Executes each surefire plugin execution multiple times based on the configurations
 * that are passed using the "test.configs" property. The valid configurations
 * are kept in the test.framework project under src/conf, using the "-conf" suffix
 * to distinguish from the datastore configurations.
 * When no configuration is passed it just runs the datastore configuration without
 * using any additional configuration file.
 * @goal run-tests
 * @phase test
 * @requiresDependencyResolution test
 */
public class MultiConfigTestRunnerMojo
        extends AbstractMojo
{

    private static final String DEFAULT_TEST_ID = "default-test";

    /**
     * The project currently being build.
     * @parameter expression="${project}"
     * @required
     * @readonly
     */
    private MavenProject project;

    /**
     * The current Maven session.
     * @parameter expression="${session}"
     * @required
     * @readonly
     */
    private MavenSession session;

    /**
     * The Maven BuildPluginManager component.
     * @component
     * @required
     */
    private BuildPluginManager pluginManager;

    /**
     * The sets to be run.
     * For each configuration it will run surefire once for each set e.g.
     * datastore and application.
     * @parameter
     */
    private String[] executionRefs;

    /**
     * Comma separated values for the configurations to run
     * @parameter
     * expression="${test.configs}"
     * default-value="default"
     */
    private String configsParam;

    public void execute()
        throws MojoExecutionException
    {
        List<String> configs = parseConfigs();
        for (String config : configs)
        {
            runTestsFor(config);
        }
    }

    private List<String> parseConfigs()
    {
        List<String> configs = new ArrayList<String>();

        StringTokenizer tokenizer = new StringTokenizer(configsParam);
        while (tokenizer.hasMoreTokens())
        {
            String configName = tokenizer.nextToken(",");
            configs.add(configName);
        }

        return configs;
    }

    private void runTestsFor(String configName) throws MojoExecutionException
    {
        if (executionRefs == null)
        {
            executionRefs = new String[]{DEFAULT_TEST_ID};
        }

        for (String executionId : executionRefs)
        {
            logTestRunFor(executionId + " (" + configName + ")");
            Xpp3Dom testSetConfig = newConfigFor(configName, executionId);
            executeSurefire(testSetConfig);
        }
    }

    /*
     * Run the tests using the classes generated by the enhancer. They must come first
     * in the classpath to prevent using the non-enhanced datanucleus-test-samples dependency.
     * We also need to add the default /target/classes to the classpath for the common/annotated classes.
     */
    private Xpp3Dom newConfigFor(String configName, String executionId)
    {
        Xpp3Dom configuration;
        if (executionId.equals(DEFAULT_TEST_ID))
        {
            // Just running the default execution for each config
            configuration = configuration(
                    element("reportsDirectory", "${project.build.directory}/surefire-reports/" + configName));
        }
        else
        {
            configuration = configuration(
                element("skip", "${test." + executionId + ".skip}"),
                element("classesDirectory", "${project.build.outputDirectory}/" + executionId),
                element("additionalClasspathElements",
                    element("additionalClasspathElement", "${project.build.outputDirectory}")),
                element("reportsDirectory", "${project.build.directory}/surefire-reports/" + executionId + "-" + configName));
        }

        Xpp3Dom existingConfiguration = getExistingConfiguration(executionId);

        addTestConfigProperty(configuration, existingConfiguration, configName);

        return Xpp3DomUtils.mergeXpp3Dom(configuration, existingConfiguration);
    }

    private void addTestConfigProperty(Xpp3Dom configuration, Xpp3Dom existingConfiguration, String configName)
    {
        // No configuration file for default
        if (!configName.equals("default"))
        {
            Xpp3Dom systemProperties = new Xpp3Dom(existingConfiguration.getChild("systemProperties"));
            systemProperties.addChild(
                    element("property",
                        element("name", "datanucleus.test.config"),
                        element("value", configName)).toDom());

            configuration.addChild(systemProperties);
        }
    }

    private Xpp3Dom getExistingConfiguration(String executionId)
    {
        Map<String, PluginExecution> executionsMap = surefirePlugin().getExecutionsAsMap();
        PluginExecution pluginExecution = executionsMap.get(executionId);
        if (pluginExecution == null)
        {
            throw new RuntimeException("Invalid execution id specified: " + executionId + ". Valid values are: " + executionsMap.keySet());
        }
        else
        {
            return (Xpp3Dom) pluginExecution.getConfiguration();
        }
    }

    private void executeSurefire(Xpp3Dom configuration) throws MojoExecutionException
    {
        executeMojo(surefirePlugin(), goal("test"), configuration, env());
    }

    private ExecutionEnvironment env()
    {
        return executionEnvironment(project, session, pluginManager);
    }

    private Plugin surefirePlugin()
    {
        return project.getPlugin("org.apache.maven.plugins:maven-surefire-plugin");
    }

    private void logTestRunFor(String testSet)
    {
        info("-------------------------------------------------------");
        info("Tests - " + testSet);
        info("-------------------------------------------------------");
    }

    private void info(String content)
    {
        getLog().info(content);
    }
}
